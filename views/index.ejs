<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Image Processing API</title>
  <!-- pretend to be in the public folder -->
  <link rel="stylesheet" href="./css/style.css">
</head>

<body>
  <canvas id="canvas"></canvas>

  <form action="<%= HOST %>/api/resize" method="post" target="_blank" enctype="multipart/form-data" id="form">
    <h1>Image Resizer</h1>
    <div class="form-body">
      <div class="row">
        <label>
          <p>width</p>
          <input type="number" name="width" id="width" placeholder="choose the width" value="200" required />
        </label>
        <label>
          <p>height</p>
          <input type="number" name="height" id="height" placeholder="choose the height" value="200" required />
        </label>
        <label>
          <p>blur</p>
          <input type="number" name="blur" id="blur" placeholder="choose the blur" min="0" max="1000" maxlength="4"
            value="0" step="0.1" required />
        </label>
      </div>
      <div class="row">
        <input type="file" name="image" id="image" placeholder="choose the image" required
          value="../public/images/fjord.jpg" />
      </div>
    </div>
    <div class="rule"></div>
    <div class="form-footer">
      <button type="submit" class="button-30" title="resize the image">Resize</button>
      <button type="button" class="button-30" id="images" title="show available images">Images</button>
      <button type="button" class="button-30" id="thumbnails" title="show available thumbnails">Thumbnails</button>
      <button type="button" class="button-30" id="clear" title="clear cache">Clear</button>
    </div>
  </form>

  <script>
    const HOST = JSON.parse('<%- JSON.stringify(HOST) %>');
    const imagesBtn = document.getElementById("images");
    const thumbnailsBtn = document.getElementById("thumbnails");
    const clearBtn = document.getElementById("clear");
    const widthEl = document.getElementById("width");
    const heightEl = document.getElementById("height");
    const blurEl = document.getElementById("blur");
    const imageEl = document.getElementById("image");

    const listImages = (resized) => {
      document.location.href = HOST + "/api/" + (resized ? "thumbnails" : "images");
    }

    imagesBtn.addEventListener("click", () => listImages(false));
    thumbnailsBtn.addEventListener("click", () => listImages(true));
    clearBtn.addEventListener("click", () => {
      localStorage.clear();
      widthEl.value = 200;
      heightEl.value = 200;
      blurEl.value = 0;
      fetch(HOST + "/api/clear", {
        method: "delete"
      })
    });

    if (localStorage.width) widthEl.value = localStorage.width;
    widthEl.addEventListener(`input`, (e) => {
      localStorage.setItem("width", e.currentTarget.value)
    });

    if (localStorage.height) heightEl.value = localStorage.height;
    heightEl.addEventListener(`input`, (e) => {
      localStorage.setItem("height", e.currentTarget.value)
    });

    if (localStorage.blur) blurEl.value = localStorage.blur;
    blurEl.addEventListener(`input`, (e) => {
      localStorage.setItem("blur", e.currentTarget.value)
    });

    const canvas = document.querySelector("canvas");
    const ctx = canvas.getContext("2d");

    canvas.width = window.outerWidth;
    canvas.height = window.outerHeight;

    ctx.fillStyle = "#000";
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    const fontSize = 16;
    const texts = "ABCDEFGHIJKLMNOPQRSTUVXYZ".split("");
    const columnCount = Math.ceil(canvas.width / fontSize);
    const rowCount = Math.ceil(canvas.height / fontSize);

    const rowStatus = [];
    for (let i = 0; i < columnCount; i++) {
      rowStatus[i] = Math.floor(Math.random() * rowCount) * -1;
    }

    function draw() {
      ctx.fillStyle = "rgba(0,0,0,0.1)";
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      const text = texts[Math.floor(Math.random() * texts.length)];
      rowStatus.forEach((row, column) => {
        ctx.fillStyle = "#48f613";
        ctx.fillText(text, column * fontSize, row * fontSize);

        rowStatus[column] += 1;
        if (rowStatus[column] > rowCount) {
          rowStatus[column] = 0;
        }
      });
    }

    setInterval(draw, 100);
  </script>
</body>

</html>
